
class Node {
  constructor(key, value) {
    this.key = key
    this.value = value
    this.next = null
    this.prev = null
  }
}

class DoublyLinkedList {
  constructor() {
    this.head = null
    this.tail = null
    this.size = 0
  }

  insert(key, value) {
    const newNode = new Node(key, value)
    if (!this.head) {
      this.head = newNode
      this.tail = newNode
    } else {
      newNode.prev = this.tail
      this.tail.next = newNode
      this.tail = newNode
    }
    this.size++
    return newNode
  }

  remove(node) {
    // if node is last/tail
    if (!node.next) {
      this.tail = node.prev
    } else {
      node.next.prev = node.prev
    }

    // if node is head/first
    if (!node.prev) {
      this.head = node.next
    } else {
      node.prev.next = node.next
    }

    this.size--
  }
}

function DS() {
  this.maxNode = null
  this.nodeMap = new Map()
  this.dll = new DoublyLinkedList()

  this.insert = function (key, value) {
    if (this.nodeMap.get(key)) {
      return
    }

    const newInsertedNode = this.dll.insert(key, value)
    this.nodeMap.set(key, newInsertedNode)

    if (!this.maxNode || this.maxNode.value < value) {
      this.maxNode = newInsertedNode
    }

  }

  this.remove = function (key) {
    if (!this.nodeMap.has(key)) {
      return
    }

    const nodeToBeRemoved = this.nodeMap.get(key)
    this.nodeMap.delete(key)
    this.dll.remove(nodeToBeRemoved)
    
  }

  this.findMax = function () {
    console.log("Max", this.maxNode)
    return this.maxNode
  }

  this.deleteMax = function () {
    this.remove(this.maxNode.key)
  }

  this.print = function() {
    console.log(this.nodeMap)
    console.log(this.dll)
  }
}

const ds = new DS()

ds.insert("a", 5)
ds.insert("b", 10)
ds.insert("c", 2)

// ds.remove("b")

ds.findMax() // 5

ds.deleteMax() // 3 or 1

ds.print()
